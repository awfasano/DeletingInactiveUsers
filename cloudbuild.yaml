steps:
  # 1. Build the container image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/firestore-cleanup-service:$COMMIT_SHA'
      - '.'
    id: 'Build Image'

  # 2. Push the container image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/firestore-cleanup-service:$COMMIT_SHA'
    id: 'Push Image'

  # 3. Deploy to Cloud Run (requiring authentication)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'firestore-cleanup-service'
      - '--image=${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/firestore-cleanup-service:$COMMIT_SHA'
      - '--region=${_REGION}'
      - '--platform=managed'
      - '--no-allow-unauthenticated'  # Require authentication
      - '--set-env-vars=DATABASE_ID=uploads'
      - '--memory=512Mi'
      - '--timeout=540'  # 9 minutes timeout
      - '--max-instances=10'
      - '--service-account=${_SERVICE_ACCOUNT}'
    id: 'Deploy to Cloud Run'

  # 4. Grant Cloud Run Invoker permission to the service account
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'services'
      - 'add-iam-policy-binding'
      - 'firestore-cleanup-service'
      - '--member=serviceAccount:${_SERVICE_ACCOUNT}'
      - '--role=roles/run.invoker'
      - '--region=${_REGION}'
    id: 'Grant Invoker Permission'

  # 5. Create or update Cloud Scheduler job with authentication
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - '-c'
      - |
        # Get the Cloud Run service URL
        SERVICE_URL=$(gcloud run services describe firestore-cleanup-service --region=${_REGION} --format='value(status.url)')

        # Update existing job or create a new one
        gcloud scheduler jobs update http firestore-cleanup-job \
          --location=${_REGION} \
          --schedule="0 * * * *" \
          --uri="${SERVICE_URL}/" \
          --http-method=POST \
          --oidc-service-account-email="${_SERVICE_ACCOUNT}" \
          --oidc-token-audience="${SERVICE_URL}" \
          --time-zone="Etc/UTC" \
          --attempt-deadline="540s" \
          --description="Hourly cleanup of Firestore inactive users and old messages" \
          --quiet || \
        gcloud scheduler jobs create http firestore-cleanup-job \
          --location=${_REGION} \
          --schedule="0 * * * *" \
          --uri="${SERVICE_URL}/" \
          --http-method=POST \
          --oidc-service-account-email="${_SERVICE_ACCOUNT}" \
          --oidc-token-audience="${SERVICE_URL}" \
          --time-zone="Etc/UTC" \
          --attempt-deadline="540s" \
          --description="Hourly cleanup of Firestore inactive users and old messages"

        echo "Cloud Scheduler job created/updated successfully"
        echo "Service URL: ${SERVICE_URL}"
        echo "Next run will be at the top of the next hour"
    id: 'Create or Update Scheduler Job'

  # 6. Test the deployment by running the scheduler job once
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - '-c'
      - |
        echo "Testing the scheduler job..."
        gcloud scheduler jobs run firestore-cleanup-job --location=${_REGION}
        echo "Test run initiated. Check Cloud Run logs for results."
    id: 'Test Scheduler Job'

# Define the images to be pushed to Artifact Registry
images:
  - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/firestore-cleanup-service:$COMMIT_SHA'

# Define substitutions that can be passed in from the trigger
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
substitutions:
  _REGION: 'us-east5'
  _ARTIFACT_REGISTRY_REPO: 'cleanup-functions-repo'
  _SERVICE_ACCOUNT: '457201302256-compute@developer.gserviceaccount.com'